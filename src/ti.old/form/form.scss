$defaultHeight:1.3em!default;
$paddingTop:.6em!default;
$paddingBottom:.65em!default;
$paddingSide:.9em!default;
$innerPadding:$paddingTop $paddingSide $paddingBottom!default;
$border:none!default;
$boxShadowColor:var(--cc)!default;
$boxShadowWidth:1px!default;
$boxShadowDefault:$boxShadowWidth 0 0 0 $boxShadowColor,
      0 $boxShadowWidth 0 0 $boxShadowColor,
      $boxShadowWidth $boxShadowWidth 0 0 $boxShadowColor,   /* Just to fix the corner */
      $boxShadowWidth 0 0 0 $boxShadowColor inset,
      0 $boxShadowWidth 0 0 $boxShadowColor inset!default;
//$boxShadow:none;//$boxShadowDefault!default;

$background:transparent!default;
$border-radius:var(--r)!default;

$iconOpacity:.9!default;
$iconOpacityHover:.96!default;
$iconBackOpacity:.4!default;
$iconBackOpacityHover:.4!default;
$iconBackWidth:2em!default;
$iconPaddingSide:.5em!default;
$iconPaddingTopAdjustment:.05em!default; // Depends on font
$iconPadding:($paddingTop+$iconPaddingTopAdjustment) $iconPaddingSide $paddingBottom!default;
//iconPaddingTopAdjustment:.05em!default; // Depends on font
$iconFontSize:1.2em!default;

$inputFontFamily:var(--font-d)!default;
$inputFontWeight:normal!default;
$inputLineHeight:1.3em!default;

$textareaLineHeight:1.5em!default;

$checkboxHeight:2em!default;
$checkboxPaddingLeft:$checkboxHeight + 1em;
$checkboxInnerPadding:$paddingTop $paddingSide $paddingBottom $checkboxPaddingLeft;
$radioHeight:$checkboxHeight;
//$radioPaddingLeft:$checkboxPaddingLeft;
//$radioInnerPadding:$paddingTop $radioPaddingLeft $paddingBottom $paddingSide;

$checkboxSvgStrokeWidth:10;
$checkboxSvgRectStrokeWidth:12;
$checkboxSvgStrokeDashOffset:100;
$checkboxSvgStrokeDashArray:100;
$checkboxSvgHeight:1.8em;
$checkboxSvgPaddingSide:($checkboxPaddingLeft - $checkboxSvgHeight) /2;
$checkboxSvgRectStroke:var(--cc, var(--dark-grey));
$checkboxSvgPathStroke:var(--cc, var(--default));
$checkboxSvgRectOpacity:.3;


$radioSvgCircleOpacity:.8;
$radioSvgCircleStroke:var(--cc, var(--dark-grey));
$radioSvgCircleFill:var(--cc, var(--grey));
$radioSvgCircleStrokeWidth:10;
//$radioSvgCircleInnerFill:var(--white);
$radioSvgCircleCheckedOpacity:1;
$radioSvgDotFill:var(--cc, var(--grey));
$radioSvgDotOpacity:$checkboxSvgRectOpacity;
$radioSvgDotCheckedFill:var(--cc, var(--grey));
$radioSvgDotCheckedOpacity:.8;
$radioSvgPathStroke:var(--cc, var(--default));
$radioSvgStrokeWidth:10;


$radioSvgDotDashoffset:300;
$radioSvgDotDasharray:300;

$notSelectedOpacity:.63;

$drawFromOffset:130;
$radioDotDrawFromOffset:300;
$animationDuration:.35s;

.input
{
  background:$background;
  position:relative;
  border-radius:$border-radius;
	box-shadow:none!important;

  &:hover,
  &:focus,
  &:active,
  {
		&:not(.disabled){
			> input,
			> textarea{
				background:var(--sdx, --cb);
			}
		}
  }

// Text-based inputs Specifics
	
  &.text > input,
  &.textarea > textarea
  {
    box-shadow:var(--cs);
    font-family:$inputFontFamily;
    color:var(--cc);
    background:var(--cb, $background);
    line-height:$inputLineHeight;
    padding:$innerPadding;
    border:$border;
    border-radius:$border-radius!important;
  }

	// Checkbox, radio Specifics
	
	&.checkbox,
	&.radio {
		background:var(--cb, $background);
    line-height:$inputLineHeight;	
		position:relative;
    padding:$checkboxInnerPadding;

		label:before,
		input[type=checkbox],
		input[type=radio]{
	    width:$checkboxHeight;
	    height:$checkboxHeight;
	    top: 50%;
	    left: $checkboxSvgPaddingSide;
	    position: absolute;
			transform: translateY(-50%);
	    cursor: pointer;
			background:blue;
		}

		input[type=checkbox],
		input[type=radio]{
				opacity: 0;
				-webkit-appearance: none;
				display: inline-block;
				vertical-align: middle;
				z-index: 100;

				&:not(:checked) ~ label {
					opacity:$notSelectedOpacity;
				}
		}

		input[type=checkbox]{
				&:checked ~ svg {
					--ado:#{$drawFromOffset};
					&.cross {
						.cross-1 {
							animation:draw-stroke $animationDuration $animationDuration ease 1 forwards;
						}
						.cross-2 {
							animation:draw-stroke $animationDuration ease 1 forwards;
						}
					}

					&.check {
						path {
							animation:draw-stroke $animationDuration ease 1 forwards;
						}
					}
			 }
		}

		input[type=radio]{
				&:checked ~ svg {
					&.circle {
						circle{
							opacity:$radioSvgCircleCheckedOpacity;
							&.outer {
							}
							&.inner {
								fill:$radioSvgCircleFill;//$checkboxSvgRectStroke;
							}
						}
					}

					&.dot {
						--ado:#{$radioDotDrawFromOffset};
						circle {
							opacity:$radioSvgDotCheckedOpacity;
							fill:$radioSvgDotCheckedFill;//$checkboxSvgRectStroke;
						}
						path {
							animation:draw-stroke $animationDuration ease 1 forwards;
						}
					}

					&.cross {
					--ado:#{$drawFromOffset};
						circle {
							opacity:$radioSvgCircleCheckedOpacity;
							fill:$radioSvgDotCheckedFill;//$checkboxSvgRectStroke;
						}
						.cross-1 {
							animation:draw-stroke $animationDuration $animationDuration ease 1 forwards;
						}
						.cross-2 {
							animation:draw-stroke $animationDuration ease 1 forwards;
						}
						path {
							stroke:white;
						}
					}
			 }
		}

		svg {
			position:absolute;
			left:$checkboxSvgPaddingSide;
			top:50%;
			transform: translateY(-50%);
			width:$checkboxSvgHeight;
			height:$checkboxSvgHeight;

			rect {
				stroke-width:$checkboxSvgRectStrokeWidth;
				stroke:$checkboxSvgRectStroke;
				opacity:$checkboxSvgRectOpacity;
				fill:transparent;
			}

			path {
				stroke:$checkboxSvgPathStroke;
				stroke-width:$checkboxSvgStrokeWidth;
				fill:transparent;
			}

			circle,
			rect {
				transition:all $animationDuration;
			}

			&.cross,
			&.check {
				path {
					stroke-dasharray:130;
					stroke-dashoffset:$drawFromOffset;
				}
				circle {
					opacity:$radioSvgCircleOpacity;
					fill:$radioSvgCircleFill;//$checkboxSvgRectStroke;
				}
			}

			&.circle {
				circle {
					&.outer {
						stroke:$radioSvgCircleFill;//$checkboxSvgRectStroke;
						stroke-width:$radioSvgCircleStrokeWidth;
						fill:transparent;
					}

					&.inner {
						fill:transparent;
						opacity:.1;

					}
					fill:$radioSvgCircleFill;//$checkboxSvgRectStroke;
					opacity:$radioSvgCircleOpacity;

					
				}
			}

			&.dot {
				circle {
					//stroke-width:$radioSvgCircleStrokeWidth;
					//stroke:$radioSvgCircleStroke;
					opacity:$radioSvgDotOpacity;
					fill:$radioSvgDotFill;//$checkboxSvgRectStroke;
				}
				path {
					stroke-dasharray:$radioSvgDotDasharray;
					stroke-dashoffset:$radioSvgDotDashoffset;
					stroke:$radioSvgPathStroke;
					stroke-width:$radioSvgStrokeWidth;
				}
			}

		}
	}


	// Textarea Specifics

  &.textarea > textarea
  {
    line-height:$textareaLineHeight;
  }

	// Text Specifics

  &.text > input
  {
    line-height:$inputLineHeight;
  }

  &.ir,
  &.il
  {
    > i
    {
      z-index:0;
      opacity:$iconOpacity;
      position:absolute;
      padding:$iconPadding;
      top:0;
      bottom:0;
      line-height:1em * (1 / $iconFontSize);
      font-size:$iconFontSize;

      &:before
      {
        content:' ';
        z-index:-1;
        background:var(--white);
        opacity:$iconBackOpacity;
        position:absolute;
        top:0;
        bottom:0;
        width:$iconBackWidth;
      }
    }

    &[class*='bh-']
    {
      &:hover,
      &:focus
      {
        i
        {
          opacity:$iconOpacityHover;
          &:before
          {
            opacity:$iconBackOpacityHover;
          }
        }
      }
      &:active
      {
        i
        {
          box-shadow:var(--ish-sm);
        }
      }
    }
  }

  &.il
  {
    & > input
    {
      padding-left:$paddingSide + $iconBackWidth;
    }

    i
    {
      left:0;
      &:before
      {
        left:0;
      }
    }
  }

  &.ir
  {
    & > input
    {
      padding-right:$paddingSide + $iconBackWidth;
    }

    i
    {
      right:0;
      &:before
      {
        right:0;
      }
    }
  }

	// 
}
